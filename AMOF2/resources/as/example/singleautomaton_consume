[start] >new signal:SignalInstance;
[Iterate: trigger] >new i:Iterator<Transition>;
while [hasNext] <i as context {
    [Next] <i, >new transition:Transition;
    [WriteStructuralFeature: senderId] <{[Expression: sourceId] <signal as context};
    branch [action.oclIsKindOf(Create)] <transition as context {
        [Call: create] <{[Expression: 
                action.oclAsType(Create).automaton.implicitInstance] <transition as context} >new offspring:Integer;
        [WriteStructuralFeature: offspring] <offspring;        
    } [action.oclIsKindOf(Output)] <transition as conteext {
        [Create: SignalInstance] >new newSignal:SignalInstance;
        [WriteStructuralFeature: sourceId] <newSignal, <{[Expression: id]};
        brach [action.oclAsType(Output).receiver->isEmpty()] <transition as context {
            [WriteStructuralFeature destinationId] <newSignal as context, <{[Expression: -1]};
        } [else] {
            [WriteStructuralFeature destinationId] <newSignal as context, <{[Expression: 
                    let rec:Expression=transition.action.oclAsType(Output).receiver in if rec.oclIsTypeOf(Offspring) then 
                    self.offspringId else self.senderId endif] <transition as transition};
        }
        [Expression: port->select(p|action.oclAsType(Output).via = p.classifier->any())] 
                <transition as context, >new outPort:PortInstanc;
        [WriteStructuralFeatureValue: signal] <outPort as context, <newSignal;
        [Call: send] <outPort as context;
    }    
}
[end];
